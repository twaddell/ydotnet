using NUnit.Framework;
using YDotNet.Document;
using YDotNet.Document.Types.XmlTexts;

namespace YDotNet.Tests.Unit.XmlTexts;

public class InsertAttributeTests
{
    [Test]
    public void InsertAttributeWithEmptyNameAndValue()
    {
        // Arrange
        var (doc, xmlText) = ArrangeDoc();

        // Act
        var transaction = doc.WriteTransaction();
        xmlText.InsertAttribute(transaction, string.Empty, string.Empty);
        var value = xmlText.GetAttribute(transaction, string.Empty);
        transaction.Commit();

        // Assert
        Assert.That(value, Is.EqualTo(string.Empty));
    }

    [Test]
    public void InsertAttributeWithEmptyNameAndFilledValue()
    {
        // Arrange
        var (doc, xmlText) = ArrangeDoc();

        // Act
        var transaction = doc.WriteTransaction();
        xmlText.InsertAttribute(transaction, string.Empty, "üî≠");
        var value = xmlText.GetAttribute(transaction, string.Empty);
        transaction.Commit();

        // Assert
        Assert.That(value, Is.EqualTo("üî≠"));
    }

    [Test]
    public void InsertAttributeWithFilledNameAndEmptyValue()
    {
        // Arrange
        var (doc, xmlText) = ArrangeDoc();

        // Act
        var transaction = doc.WriteTransaction();
        xmlText.InsertAttribute(transaction, "telescope", string.Empty);
        var value = xmlText.GetAttribute(transaction, "telescope");
        transaction.Commit();

        // Assert
        Assert.That(value, Is.EqualTo(string.Empty));
    }

    [Test]
    public void InsertMultipleAttributeWithFilledNameAndValue()
    {
        // Arrange
        var (doc, xmlText) = ArrangeDoc();

        // Act
        var transaction = doc.WriteTransaction();
        xmlText.InsertAttribute(transaction, "telescope", "üî≠");
        xmlText.InsertAttribute(transaction, "mirror", "ü™û");
        var telescopeAttribute = xmlText.GetAttribute(transaction, "telescope");
        var mirrorAttribute = xmlText.GetAttribute(transaction, "mirror");
        transaction.Commit();

        // Assert
        Assert.That(telescopeAttribute, Is.EqualTo("üî≠"));
        Assert.That(mirrorAttribute, Is.EqualTo("ü™û"));
    }

    [Test]
    public void InsertAttributeWithTheSameNameReplacesIt()
    {
        // Arrange
        var (doc, xmlText) = ArrangeDoc();

        // Act
        var transaction = doc.WriteTransaction();
        xmlText.InsertAttribute(transaction, "number", "1Ô∏è‚É£");
        var value = xmlText.GetAttribute(transaction, "number");
        transaction.Commit();

        // Assert
        Assert.That(value, Is.EqualTo("1Ô∏è‚É£"));

        // Act
        transaction = doc.WriteTransaction();
        xmlText.InsertAttribute(transaction, "number", "2Ô∏è‚É£");
        value = xmlText.GetAttribute(transaction, "number");
        transaction.Commit();

        // Assert
        Assert.That(value, Is.EqualTo("2Ô∏è‚É£"));
    }

    private static (Doc, XmlText) ArrangeDoc()
    {
        var doc = new Doc();
        var xmlFragment = doc.XmlFragment("xml-fragment");

        var transaction = doc.WriteTransaction();
        var xmlText = xmlFragment.InsertText(transaction, index: 0);
        xmlText.Insert(transaction, index: 0, "saturn-ü™ê");
        transaction.Commit();

        return (doc, xmlText);
    }
}
